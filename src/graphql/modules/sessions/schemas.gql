type Session {
  _id: ID!
  memberId: ID!
  member: Member
  start: DateScalar!
  isPresential: Boolean
  projectId: String
  taskId: String

  """
  Se end é undefined, significa que o usuário ainda está logado
  """
  end: DateScalar

  """
  Duração da sessão em milisegundos,
  A duração pode ser relativa à data de fim, ou, caso não esta exista, a hora atual.
  """
  duration: Int!
  """
  Duração da sessão no formato hh:mm
  A duração pode ser relativa à data de fim, ou, caso não esta exista, a hora atual.
  """
  formatedDuration: String!
}

type Query {
  sessions(
    memberId: ID!
    startDate: DateScalar
    endDate: DateScalar
    isPresential: Boolean
    projectId: String
    taskId: String
  ): [Session]!

  sessions(
    memberId: [ID]!
    startDate: DateScalar
    endDate: DateScalar
    isPresential: Boolean
    projectId: String
    taskId: String
  ): [Session]!

  loggedMembers: [Session]!
}

type Subscription {
  sessionUpdate: sessionUpdate!
}

input SessionCreateInput {
  memberId: ID!
  start: String!
  end: String
  projectId: String
  taskId: String
}

input SessionUpdateInput {
  start: String
  end: String
}

type Mutation {
  startSession(memberId: ID!, isPresential: Boolean!, projectId: String, taskId: String): Session!
  endSession(memberId: ID!): Session!
  updateSession(_id: ID!, data: SessionUpdateInput!): Session!
  deleteSession(_id: ID!): Boolean
  endAllSessions: Int!
}

enum Actions {
  STARTED
  FINISHED
  END_ALL_SESSIONS
}

type sessionUpdate {
  session: Session
  action: Actions!
}
